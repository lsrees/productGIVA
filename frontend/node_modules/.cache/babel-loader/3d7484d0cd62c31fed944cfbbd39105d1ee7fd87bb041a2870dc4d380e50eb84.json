{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lssr2\\\\frontend\\\\src\\\\components\\\\ProductForm.js\",\n  _s = $RefreshSig$();\n// // src/components/ProductForm.js\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import axios from 'axios';\n// // import './styles.css';\n\n// function ProductForm() {\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     description: '',\n//     price: '',\n//     quantity: '',\n//   });\n\n//   const { id } = useParams();  // Retrieve product ID from URL params (if editing)\n//   const navigate = useNavigate();  // Hook to navigate between pages\n\n//   // Fetch product data if editing\n//   useEffect(() => {\n//     if (id) {\n//       const fetchProduct = async () => {\n//         try {\n//           const response = await axios.get(`http://localhost:5002/products/${id}`);\n//           setFormData(response.data);\n//         } catch (error) {\n//           console.error('Error fetching product:', error);\n//         }\n//       };\n//       fetchProduct();\n//     }\n//   }, [id]);  // Only re-run if 'id' changes\n\n//   // Handle form field changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault(); // Prevent page refresh\n\n// //     console.log('Form data:', formData); // Log the form data\n\n// //     try {\n// //       if (id) {\n// //         console.log('Updating product...');\n// //         await axios.put(`http://localhost:5002/products/${id}`, formData);\n// //       } else {\n// //         console.log('Adding new product...');\n// //         await axios.post('http://localhost:5002/products', formData);\n// //       }\n\n// //       console.log('Redirecting to home...');\n// //       navigate('/'); // Attempt to navigate to the home page\n// //     } catch (error) {\n// //       console.error('Error saving product:', error);\n// //     }\n// //   };\n\n// const handleSubmit = async (e) => {\n//     e.preventDefault(); // Prevent page refresh\n\n//     // Validation for price and quantity\n//     if (formData.price <= 0 || isNaN(formData.price)) {\n//       alert('Error: Price must be a positive number.');\n//       return;\n//     }\n\n//     if (formData.quantity <= 0 || !Number.isInteger(Number(formData.quantity))) {\n//       alert('Error: Quantity must be a positive integer.');\n//       return;\n//     }\n\n//     console.log('Form data:', formData); // Log the form data\n\n//     try {\n//       if (id) {\n//         console.log('Updating product...');\n//         await axios.put(`http://localhost:5002/products/${id}`, formData);\n//       } else {\n//         console.log('Adding new product...');\n//         await axios.post('http://localhost:5002/products', formData);\n//       }\n\n//       console.log('Redirecting to home...');\n//       navigate('/'); // Redirect to home page after success\n//     } catch (error) {\n//       console.error('Error saving product:', error);\n//       alert('Error saving product. Please try again.');\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Name</label>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           value={formData.name}\n//           onChange={handleInputChange}\n//           className=\"form-control\"\n//           required\n//         />\n//       </div>\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Description</label>\n//         <input\n//           type=\"text\"\n//           name=\"description\"\n//           value={formData.description}\n//           onChange={handleInputChange}\n//           className=\"form-control\"\n//           required\n//         />\n//       </div>\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Price</label>\n//         <input\n//           type=\"number\"\n//           name=\"price\"\n//           value={formData.price}\n//           onChange={handleInputChange}\n//           className=\"form-control\"\n//           required\n//         />\n//       </div>\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Quantity</label>\n//         <input\n//           type=\"number\"\n//           name=\"quantity\"\n//           value={formData.quantity}\n//           onChange={handleInputChange}\n//           className=\"form-control\"\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\" className=\"btn btn-success\">\n//         {id ? 'Update Product' : 'Add Product'}\n//       </button>\n//     </form>\n//   );\n// }\n\n// export default ProductForm;\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport axios from 'axios';\n// import './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProductForm() {\n  _s();\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    price: '',\n    quantity: ''\n  });\n  const {\n    id\n  } = useParams(); // Get product ID from URL if editing\n  const navigate = useNavigate(); // Hook to navigate between pages\n  const [loading, setLoading] = useState(false); // Loading state\n\n  // Fetch product data for editing\n  useEffect(() => {\n    if (id) {\n      const fetchProduct = async () => {\n        setLoading(true);\n        try {\n          const response = await axios.get(`http://localhost:5002/products/${id}`);\n          setFormData({\n            name: response.data.name || '',\n            description: response.data.description || '',\n            price: response.data.price || '',\n            quantity: response.data.quantity || ''\n          });\n        } catch (error) {\n          console.error('Error fetching product:', error);\n          alert('Error fetching product data.');\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchProduct();\n    }\n  }, [id]);\n\n  // Handle input changes and update state\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent page refresh\n\n    // Validate price and quantity inputs\n    if (formData.price <= 0 || isNaN(formData.price)) {\n      alert('Error: Price must be a positive number.');\n      return;\n    }\n    if (formData.quantity <= 0 || !Number.isInteger(Number(formData.quantity))) {\n      alert('Error: Quantity must be a positive integer.');\n      return;\n    }\n    try {\n      if (id) {\n        // Update product if editing\n        await axios.put(`http://localhost:5002/products/${id}`, formData);\n        console.log('Product updated:', formData);\n      } else {\n        // Add new product if not editing\n        await axios.post('http://localhost:5002/products', formData);\n        console.log('New product added:', formData);\n      }\n      navigate('/'); // Redirect to product list\n    } catch (error) {\n      console.error('Error saving product:', error);\n      alert('Error saving product. Please try again.');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading product data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 12\n    }, this); // Show loading message\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        value: formData.name,\n        onChange: handleInputChange,\n        className: \"form-control\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"description\",\n        value: formData.description,\n        onChange: handleInputChange,\n        className: \"form-control\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: \"Price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\" // Allow float values for price\n        ,\n        name: \"price\",\n        value: formData.price,\n        onChange: handleInputChange,\n        className: \"form-control\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: \"Quantity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"quantity\",\n        value: formData.quantity,\n        onChange: handleInputChange,\n        className: \"form-control\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success\",\n      children: id ? 'Update Product' : 'Add Product'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n}\n_s(ProductForm, \"EkOIEDjmZCTe/xSE89SpklNX9f8=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ProductForm;\nexport default ProductForm;\nvar _c;\n$RefreshReg$(_c, \"ProductForm\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","axios","jsxDEV","_jsxDEV","ProductForm","_s","formData","setFormData","name","description","price","quantity","id","navigate","loading","setLoading","fetchProduct","response","get","data","error","console","alert","handleInputChange","e","value","target","prevData","handleSubmit","preventDefault","isNaN","Number","isInteger","put","log","post","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","type","onChange","required","step","_c","$RefreshReg$"],"sources":["C:/Users/lssr2/frontend/src/components/ProductForm.js"],"sourcesContent":["// // src/components/ProductForm.js\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// // import './styles.css';\r\n\r\n// function ProductForm() {\r\n//   const [formData, setFormData] = useState({\r\n//     name: '',\r\n//     description: '',\r\n//     price: '',\r\n//     quantity: '',\r\n//   });\r\n\r\n//   const { id } = useParams();  // Retrieve product ID from URL params (if editing)\r\n//   const navigate = useNavigate();  // Hook to navigate between pages\r\n\r\n//   // Fetch product data if editing\r\n//   useEffect(() => {\r\n//     if (id) {\r\n//       const fetchProduct = async () => {\r\n//         try {\r\n//           const response = await axios.get(`http://localhost:5002/products/${id}`);\r\n//           setFormData(response.data);\r\n//         } catch (error) {\r\n//           console.error('Error fetching product:', error);\r\n//         }\r\n//       };\r\n//       fetchProduct();\r\n//     }\r\n//   }, [id]);  // Only re-run if 'id' changes\r\n\r\n//   // Handle form field changes\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n\r\n// //   const handleSubmit = async (e) => {\r\n// //     e.preventDefault(); // Prevent page refresh\r\n  \r\n// //     console.log('Form data:', formData); // Log the form data\r\n  \r\n// //     try {\r\n// //       if (id) {\r\n// //         console.log('Updating product...');\r\n// //         await axios.put(`http://localhost:5002/products/${id}`, formData);\r\n// //       } else {\r\n// //         console.log('Adding new product...');\r\n// //         await axios.post('http://localhost:5002/products', formData);\r\n// //       }\r\n  \r\n// //       console.log('Redirecting to home...');\r\n// //       navigate('/'); // Attempt to navigate to the home page\r\n// //     } catch (error) {\r\n// //       console.error('Error saving product:', error);\r\n// //     }\r\n// //   };\r\n\r\n// const handleSubmit = async (e) => {\r\n//     e.preventDefault(); // Prevent page refresh\r\n  \r\n//     // Validation for price and quantity\r\n//     if (formData.price <= 0 || isNaN(formData.price)) {\r\n//       alert('Error: Price must be a positive number.');\r\n//       return;\r\n//     }\r\n  \r\n//     if (formData.quantity <= 0 || !Number.isInteger(Number(formData.quantity))) {\r\n//       alert('Error: Quantity must be a positive integer.');\r\n//       return;\r\n//     }\r\n  \r\n//     console.log('Form data:', formData); // Log the form data\r\n  \r\n//     try {\r\n//       if (id) {\r\n//         console.log('Updating product...');\r\n//         await axios.put(`http://localhost:5002/products/${id}`, formData);\r\n//       } else {\r\n//         console.log('Adding new product...');\r\n//         await axios.post('http://localhost:5002/products', formData);\r\n//       }\r\n  \r\n//       console.log('Redirecting to home...');\r\n//       navigate('/'); // Redirect to home page after success\r\n//     } catch (error) {\r\n//       console.error('Error saving product:', error);\r\n//       alert('Error saving product. Please try again.');\r\n//     }\r\n//   };\r\n  \r\n  \r\n//   return (\r\n//     <form onSubmit={handleSubmit}>\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Name</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           name=\"name\"\r\n//           value={formData.name}\r\n//           onChange={handleInputChange}\r\n//           className=\"form-control\"\r\n//           required\r\n//         />\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Description</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           name=\"description\"\r\n//           value={formData.description}\r\n//           onChange={handleInputChange}\r\n//           className=\"form-control\"\r\n//           required\r\n//         />\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Price</label>\r\n//         <input\r\n//           type=\"number\"\r\n//           name=\"price\"\r\n//           value={formData.price}\r\n//           onChange={handleInputChange}\r\n//           className=\"form-control\"\r\n//           required\r\n//         />\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Quantity</label>\r\n//         <input\r\n//           type=\"number\"\r\n//           name=\"quantity\"\r\n//           value={formData.quantity}\r\n//           onChange={handleInputChange}\r\n//           className=\"form-control\"\r\n//           required\r\n//         />\r\n//       </div>\r\n//       <button type=\"submit\" className=\"btn btn-success\">\r\n//         {id ? 'Update Product' : 'Add Product'}\r\n//       </button>\r\n//     </form>\r\n//   );\r\n// }\r\n\r\n// export default ProductForm;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n// import './styles.css';\r\n\r\nfunction ProductForm() {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    price: '',\r\n    quantity: '',\r\n  });\r\n  const { id } = useParams();  // Get product ID from URL if editing\r\n  const navigate = useNavigate();  // Hook to navigate between pages\r\n  const [loading, setLoading] = useState(false); // Loading state\r\n\r\n  // Fetch product data for editing\r\n  useEffect(() => {\r\n    if (id) {\r\n      const fetchProduct = async () => {\r\n        setLoading(true);\r\n        try {\r\n          const response = await axios.get(`http://localhost:5002/products/${id}`);\r\n          setFormData({\r\n            name: response.data.name || '',\r\n            description: response.data.description || '',\r\n            price: response.data.price || '',\r\n            quantity: response.data.quantity || '',\r\n          });\r\n        } catch (error) {\r\n          console.error('Error fetching product:', error);\r\n          alert('Error fetching product data.');\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchProduct();\r\n    }\r\n  }, [id]);\r\n\r\n  // Handle input changes and update state\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault(); // Prevent page refresh\r\n\r\n    // Validate price and quantity inputs\r\n    if (formData.price <= 0 || isNaN(formData.price)) {\r\n      alert('Error: Price must be a positive number.');\r\n      return;\r\n    }\r\n\r\n    if (formData.quantity <= 0 || !Number.isInteger(Number(formData.quantity))) {\r\n      alert('Error: Quantity must be a positive integer.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (id) {\r\n        // Update product if editing\r\n        await axios.put(`http://localhost:5002/products/${id}`, formData);\r\n        console.log('Product updated:', formData);\r\n      } else {\r\n        // Add new product if not editing\r\n        await axios.post('http://localhost:5002/products', formData);\r\n        console.log('New product added:', formData);\r\n      }\r\n      navigate('/'); // Redirect to product list\r\n    } catch (error) {\r\n      console.error('Error saving product:', error);\r\n      alert('Error saving product. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading product data...</p>; // Show loading message\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"mb-3\">\r\n        <label className=\"form-label\">Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={formData.name}\r\n          onChange={handleInputChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label className=\"form-label\">Description</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"description\"\r\n          value={formData.description}\r\n          onChange={handleInputChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label className=\"form-label\">Price</label>\r\n        <input\r\n          type=\"number\"\r\n          step=\"0.01\" // Allow float values for price\r\n          name=\"price\"\r\n          value={formData.price}\r\n          onChange={handleInputChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label className=\"form-label\">Quantity</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"quantity\"\r\n          value={formData.quantity}\r\n          onChange={handleInputChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-success\">\r\n        {id ? 'Update Product' : 'Add Product'}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ProductForm;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,OAAOC,KAAK,MAAM,OAAO;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC;IACvCU,IAAI,EAAE,EAAE;IACRC,WAAW,EAAE,EAAE;IACfC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAM;IAAEC;EAAG,CAAC,GAAGZ,SAAS,CAAC,CAAC,CAAC,CAAE;EAC7B,MAAMa,QAAQ,GAAGd,WAAW,CAAC,CAAC,CAAC,CAAE;EACjC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/C;EACAD,SAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}