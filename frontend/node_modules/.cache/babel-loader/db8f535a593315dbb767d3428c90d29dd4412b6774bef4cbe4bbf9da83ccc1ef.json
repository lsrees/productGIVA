{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lssr2\\\\frontend\\\\src\\\\components\\\\ProductForm.js\",\n  _s = $RefreshSig$();\n// // src/components/ProductForm.js\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import axios from 'axios';\n// // import './styles.css';\n\n// function ProductForm() {\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     description: '',\n//     price: '',\n//     quantity: '',\n//   });\n\n//   const { id } = useParams();  // Retrieve product ID from URL params (if editing)\n//   const navigate = useNavigate();  // Hook to navigate between pages\n\n//   // Fetch product data if editing\n//   useEffect(() => {\n//     if (id) {\n//       const fetchProduct = async () => {\n//         try {\n//           const response = await axios.get(`http://localhost:5002/products/${id}`);\n//           setFormData(response.data);\n//         } catch (error) {\n//           console.error('Error fetching product:', error);\n//         }\n//       };\n//       fetchProduct();\n//     }\n//   }, [id]);  // Only re-run if 'id' changes\n\n//   // Handle form field changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault(); // Prevent page refresh\n\n// //     console.log('Form data:', formData); // Log the form data\n\n// //     try {\n// //       if (id) {\n// //         console.log('Updating product...');\n// //         await axios.put(`http://localhost:5002/products/${id}`, formData);\n// //       } else {\n// //         console.log('Adding new product...');\n// //         await axios.post('http://localhost:5002/products', formData);\n// //       }\n\n// //       console.log('Redirecting to home...');\n// //       navigate('/'); // Attempt to navigate to the home page\n// //     } catch (error) {\n// //       console.error('Error saving product:', error);\n// //     }\n// //   };\n\n// const handleSubmit = async (e) => {\n//     e.preventDefault(); // Prevent page refresh\n\n//     // Validation for price and quantity\n//     if (formData.price <= 0 || isNaN(formData.price)) {\n//       alert('Error: Price must be a positive number.');\n//       return;\n//     }\n\n//     if (formData.quantity <= 0 || !Number.isInteger(Number(formData.quantity))) {\n//       alert('Error: Quantity must be a positive integer.');\n//       return;\n//     }\n\n//     console.log('Form data:', formData); // Log the form data\n\n//     try {\n//       if (id) {\n//         console.log('Updating product...');\n//         await axios.put(`http://localhost:5002/products/${id}`, formData);\n//       } else {\n//         console.log('Adding new product...');\n//         await axios.post('http://localhost:5002/products', formData);\n//       }\n\n//       console.log('Redirecting to home...');\n//       navigate('/'); // Redirect to home page after success\n//     } catch (error) {\n//       console.error('Error saving product:', error);\n//       alert('Error saving product. Please try again.');\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Name</label>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           value={formData.name}\n//           onChange={handleInputChange}\n//           className=\"form-control\"\n//           required\n//         />\n//       </div>\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Description</label>\n//         <input\n//           type=\"text\"\n//           name=\"description\"\n//           value={formData.description}\n//           onChange={handleInputChange}\n//           className=\"form-control\"\n//           required\n//         />\n//       </div>\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Price</label>\n//         <input\n//           type=\"number\"\n//           name=\"price\"\n//           value={formData.price}\n//           onChange={handleInputChange}\n//           className=\"form-control\"\n//           required\n//         />\n//       </div>\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Quantity</label>\n//         <input\n//           type=\"number\"\n//           name=\"quantity\"\n//           value={formData.quantity}\n//           onChange={handleInputChange}\n//           className=\"form-control\"\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\" className=\"btn btn-success\">\n//         {id ? 'Update Product' : 'Add Product'}\n//       </button>\n//     </form>\n//   );\n// }\n\n// export default ProductForm;\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport axios from 'axios';\n// import './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProductForm() {\n  _s();\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    price: '',\n    quantity: ''\n  });\n  const {\n    id\n  } = useParams(); // Retrieve product ID from URL params (if editing)\n  const navigate = useNavigate(); // Hook to navigate between pages\n  const [loading, setLoading] = useState(false); // For handling loading state\n\n  // Fetch product data if editing\n  useEffect(() => {\n    if (id) {\n      const fetchProduct = async () => {\n        setLoading(true);\n        try {\n          const response = await axios.get(`http://localhost:5002/products/${id}`);\n          setFormData(response.data); // Populate the form with fetched data\n        } catch (error) {\n          console.error('Error fetching product:', error);\n          alert('Error fetching product data. Please try again.');\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchProduct();\n    }\n  }, [id]); // Only re-run if 'id' changes\n\n  // Handle form field changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent page refresh\n\n    // Validation for price and quantity\n    if (formData.price <= 0 || isNaN(formData.price)) {\n      alert('Error: Price must be a positive number.');\n      return;\n    }\n    if (formData.quantity <= 0 || !Number.isInteger(Number(formData.quantity))) {\n      alert('Error: Quantity must be a positive integer.');\n      return;\n    }\n    console.log('Form data:', formData); // Log the form data\n\n    try {\n      if (id) {\n        console.log('Updating product...');\n        await axios.put(`http://localhost:5002/products/${id}`, formData);\n      } else {\n        console.log('Adding new product...');\n        await axios.post('http://localhost:5002/products', formData);\n      }\n      console.log('Redirecting to home...');\n      navigate('/'); // Redirect to home page after success\n    } catch (error) {\n      console.error('Error saving product:', error);\n      alert('Error saving product. Please try again.');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading product data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 12\n    }, this); // Display loading state if data is being fetched\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        value: formData.name,\n        onChange: handleInputChange,\n        className: \"form-control\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"description\",\n        value: formData.description,\n        onChange: handleInputChange,\n        className: \"form-control\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: \"Price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\" // Allow float values\n        ,\n        name: \"price\",\n        value: formData.price,\n        onChange: handleInputChange,\n        className: \"form-control\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: \"Quantity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"quantity\",\n        value: formData.quantity,\n        onChange: handleInputChange,\n        className: \"form-control\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success\",\n      children: id ? 'Update Product' : 'Add Product'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n}\n_s(ProductForm, \"EkOIEDjmZCTe/xSE89SpklNX9f8=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ProductForm;\nexport default ProductForm;\nvar _c;\n$RefreshReg$(_c, \"ProductForm\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","axios","jsxDEV","_jsxDEV","ProductForm","_s","formData","setFormData","name","description","price","quantity","id","navigate","loading","setLoading","fetchProduct","response","get","data","error","console","alert","handleInputChange","e","value","target","handleSubmit","preventDefault","isNaN","Number","isInteger","log","put","post","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","type","onChange","required","step","_c","$RefreshReg$"],"sources":["C:/Users/lssr2/frontend/src/components/ProductForm.js"],"sourcesContent":["// // src/components/ProductForm.js\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// // import './styles.css';\r\n\r\n// function ProductForm() {\r\n//   const [formData, setFormData] = useState({\r\n//     name: '',\r\n//     description: '',\r\n//     price: '',\r\n//     quantity: '',\r\n//   });\r\n\r\n//   const { id } = useParams();  // Retrieve product ID from URL params (if editing)\r\n//   const navigate = useNavigate();  // Hook to navigate between pages\r\n\r\n//   // Fetch product data if editing\r\n//   useEffect(() => {\r\n//     if (id) {\r\n//       const fetchProduct = async () => {\r\n//         try {\r\n//           const response = await axios.get(`http://localhost:5002/products/${id}`);\r\n//           setFormData(response.data);\r\n//         } catch (error) {\r\n//           console.error('Error fetching product:', error);\r\n//         }\r\n//       };\r\n//       fetchProduct();\r\n//     }\r\n//   }, [id]);  // Only re-run if 'id' changes\r\n\r\n//   // Handle form field changes\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n\r\n// //   const handleSubmit = async (e) => {\r\n// //     e.preventDefault(); // Prevent page refresh\r\n  \r\n// //     console.log('Form data:', formData); // Log the form data\r\n  \r\n// //     try {\r\n// //       if (id) {\r\n// //         console.log('Updating product...');\r\n// //         await axios.put(`http://localhost:5002/products/${id}`, formData);\r\n// //       } else {\r\n// //         console.log('Adding new product...');\r\n// //         await axios.post('http://localhost:5002/products', formData);\r\n// //       }\r\n  \r\n// //       console.log('Redirecting to home...');\r\n// //       navigate('/'); // Attempt to navigate to the home page\r\n// //     } catch (error) {\r\n// //       console.error('Error saving product:', error);\r\n// //     }\r\n// //   };\r\n\r\n// const handleSubmit = async (e) => {\r\n//     e.preventDefault(); // Prevent page refresh\r\n  \r\n//     // Validation for price and quantity\r\n//     if (formData.price <= 0 || isNaN(formData.price)) {\r\n//       alert('Error: Price must be a positive number.');\r\n//       return;\r\n//     }\r\n  \r\n//     if (formData.quantity <= 0 || !Number.isInteger(Number(formData.quantity))) {\r\n//       alert('Error: Quantity must be a positive integer.');\r\n//       return;\r\n//     }\r\n  \r\n//     console.log('Form data:', formData); // Log the form data\r\n  \r\n//     try {\r\n//       if (id) {\r\n//         console.log('Updating product...');\r\n//         await axios.put(`http://localhost:5002/products/${id}`, formData);\r\n//       } else {\r\n//         console.log('Adding new product...');\r\n//         await axios.post('http://localhost:5002/products', formData);\r\n//       }\r\n  \r\n//       console.log('Redirecting to home...');\r\n//       navigate('/'); // Redirect to home page after success\r\n//     } catch (error) {\r\n//       console.error('Error saving product:', error);\r\n//       alert('Error saving product. Please try again.');\r\n//     }\r\n//   };\r\n  \r\n  \r\n//   return (\r\n//     <form onSubmit={handleSubmit}>\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Name</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           name=\"name\"\r\n//           value={formData.name}\r\n//           onChange={handleInputChange}\r\n//           className=\"form-control\"\r\n//           required\r\n//         />\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Description</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           name=\"description\"\r\n//           value={formData.description}\r\n//           onChange={handleInputChange}\r\n//           className=\"form-control\"\r\n//           required\r\n//         />\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Price</label>\r\n//         <input\r\n//           type=\"number\"\r\n//           name=\"price\"\r\n//           value={formData.price}\r\n//           onChange={handleInputChange}\r\n//           className=\"form-control\"\r\n//           required\r\n//         />\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Quantity</label>\r\n//         <input\r\n//           type=\"number\"\r\n//           name=\"quantity\"\r\n//           value={formData.quantity}\r\n//           onChange={handleInputChange}\r\n//           className=\"form-control\"\r\n//           required\r\n//         />\r\n//       </div>\r\n//       <button type=\"submit\" className=\"btn btn-success\">\r\n//         {id ? 'Update Product' : 'Add Product'}\r\n//       </button>\r\n//     </form>\r\n//   );\r\n// }\r\n\r\n// export default ProductForm;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n// import './styles.css';\r\n\r\nfunction ProductForm() {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    price: '',\r\n    quantity: '',\r\n  });\r\n\r\n  const { id } = useParams();  // Retrieve product ID from URL params (if editing)\r\n  const navigate = useNavigate();  // Hook to navigate between pages\r\n  const [loading, setLoading] = useState(false); // For handling loading state\r\n\r\n  // Fetch product data if editing\r\n  useEffect(() => {\r\n    if (id) {\r\n      const fetchProduct = async () => {\r\n        setLoading(true);\r\n        try {\r\n          const response = await axios.get(`http://localhost:5002/products/${id}`);\r\n          setFormData(response.data);  // Populate the form with fetched data\r\n        } catch (error) {\r\n          console.error('Error fetching product:', error);\r\n          alert('Error fetching product data. Please try again.');\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchProduct();\r\n    }\r\n  }, [id]);  // Only re-run if 'id' changes\r\n\r\n  // Handle form field changes\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault(); // Prevent page refresh\r\n\r\n    // Validation for price and quantity\r\n    if (formData.price <= 0 || isNaN(formData.price)) {\r\n      alert('Error: Price must be a positive number.');\r\n      return;\r\n    }\r\n\r\n    if (formData.quantity <= 0 || !Number.isInteger(Number(formData.quantity))) {\r\n      alert('Error: Quantity must be a positive integer.');\r\n      return;\r\n    }\r\n\r\n    console.log('Form data:', formData); // Log the form data\r\n\r\n    try {\r\n      if (id) {\r\n        console.log('Updating product...');\r\n        await axios.put(`http://localhost:5002/products/${id}`, formData);\r\n      } else {\r\n        console.log('Adding new product...');\r\n        await axios.post('http://localhost:5002/products', formData);\r\n      }\r\n\r\n      console.log('Redirecting to home...');\r\n      navigate('/'); // Redirect to home page after success\r\n    } catch (error) {\r\n      console.error('Error saving product:', error);\r\n      alert('Error saving product. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading product data...</p>; // Display loading state if data is being fetched\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"mb-3\">\r\n        <label className=\"form-label\">Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={formData.name}\r\n          onChange={handleInputChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label className=\"form-label\">Description</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"description\"\r\n          value={formData.description}\r\n          onChange={handleInputChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label className=\"form-label\">Price</label>\r\n        <input\r\n          type=\"number\"\r\n          step=\"0.01\" // Allow float values\r\n          name=\"price\"\r\n          value={formData.price}\r\n          onChange={handleInputChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label className=\"form-label\">Quantity</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"quantity\"\r\n          value={formData.quantity}\r\n          onChange={handleInputChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-success\">\r\n        {id ? 'Update Product' : 'Add Product'}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ProductForm;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,OAAOC,KAAK,MAAM,OAAO;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC;IACvCU,IAAI,EAAE,EAAE;IACRC,WAAW,EAAE,EAAE;IACfC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,MAAM;IAAEC;EAAG,CAAC,GAAGZ,SAAS,CAAC,CAAC,CAAC,CAAE;EAC7B,MAAMa,QAAQ,GAAGd,WAAW,CAAC,CAAC,CAAC,CAAE;EACjC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/C;EACAD,SAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}